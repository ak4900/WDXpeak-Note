
i 插入
a 添加

hjkl 左下上右
0 行未
$ 行头

gg 文件投行

g; 之前编辑的位置
g, 最新编辑位置
:changes 打开更改列表

q/ 打开command line window

G 文件尾行
3G 跳到第三行
50% 跳到文件中间，文件跳转百分比
H
M
L
ctrl-G 查看当前第几行
:set number 设置行号
:set nonumber 不设置行号
:set ruler 右下方一直显示当前行号

w
b
e
ge  跳单词

ctrl-u 上滚半屏
ctrl-d 下滚半屏
ctrl-e 上滚一行
ctrl-y 下滚一行
ctrl-f 下滚全屏
ctrl-b 上滚全屏
zz 屏幕置中
zb 屏幕底部
zt 屏幕上

ctrl+L 重载当前屏幕

x 删除
% 跳括号

fx 当前行向前搜索x字符
tx 当前行向后搜索x字符

o 插入空行并 添加模式

`` 反单引号跳回上次跳转的地方
ctrl-o 跳回更早前older的地方
ctrl-i（或者tab） 跳下一个
:jumps 显示跳转标记
自定义标记！！！
ma  把当前光标位置定义为a
`a 跳到marka
:marks 查看标记了哪些mark
`0 每次打开上次编辑过的文件，输入这个可以返回上次退出时的地方

u 撤销
ctrl-R 重做

/xx 搜索xx，搜索中按n是继续搜索 N反向查找 搜索时按上下方向键可以重新查找之前历史
？xx 反向搜索
* 直接使用当前光标单词作关键字搜索
/the\> 精准匹配，这样就只会匹配the 不会匹配there
:set hlsearch 高亮搜索关键词 
:set ignorecase 忽略搜索时大小写
:set incsearch 即时搜索

dw 删除一个单词，可以d4w删除四个单词，或者可以d4e，或者可以3dw=d3w
d$或者d0 可以删除光标到行头或者行未
dd 删除整行
J 删除当前行换行符，两行连接
------另外一种删除------
c 与d类似，不过删除完会进入插入模式
x 代表 dl(删除当前光标下的字符)
X 代表 dh(删除当前光标左边的字符)
D 代表 d$(删除到行尾的内容)
C 代表 c$(修改到行尾的内容)
s 代表 cl(修改一个字符)
S 代表 cc(修改一整行)
---------------------
r 修改当前光标字符，并一直维持在normal模式
5rx 把5个字符换成x
R 替换模式，类似按键盘的insert切换

. 超强大的重复前一个动作的命令,例如在<b>的<上使用 df>，删完后再到 </b> 里用.

---------------------
visual模式（选择块）
v 进入以后可以移动选择
V 可以进入整行选择模式
ctrl-v 可以进入正方块的选择模式，方便删除表格

返回normal模式后 gv可以重新选择回刚才的几行
`[ 到块头
`] 到块尾
---------------------
复制 y 可以使用yy复制整行 y$复制到行未
粘贴,用d或者x删除的东西可以用p粘贴出来
ctrl-p 可以查看粘贴历史
 
跟外部粘贴版的操作
"*yy 复制
"*p 粘贴

复制到0~1 a~z的寄存器中
"1y 复制到1寄存器中
"1p 从1寄存器中拿出来

剪切(删除)也可以指定寄存器
"3dd 把一整行剪切到3寄存器中"
:reg 可以查看寄存器记录
-------------定制自己的Vim------------------
:$MYVIMRC 打开vimrc
:version 可以查看vim的各类文件版本分布详细信息
可以在vimr里面加入各种命令，例如直接 :set hlsearch
set backspace=indent,eol,start  设置删除时可以清除缩进和空格
set autoindent  换行时可以自动缩进
set ruler  总在右下角显示多少行
set showcmd 显示完整命令输入
set incsearch 在搜索同时显示已搜索到的字符
map Q gq 把按键Q映射成gq这个命令 
vnoremap _g y:exe "grep /" . escape(@", '\\/') . "/ *.c *.h"<CR> 也可以做这种复杂的内容     "
filetype plugin indent on 设置插件是文件类型，自动识别程序并缩进

-------按键映射(normal下输入:map可以查看所有设置了的映射)----------
map <F5> i{<Esc>ea}<Esc>  例如这样按f5就可以在一个单词两边插入大括号
map \p i(<Esc>ea)<Esc> 可以多用反斜杠去map命令，输入要快

以下是针对每一个模式的映射前缀
:map Normal, Visual and Operator-pending
:vmap Visual
:nmap Normal
:omap Operator-pending 这是例如在按d<F7>，就设:omap <F7> blahblah,然后按d<F7>
:close
:imap Insert
:cmap Command-line


------------plugin-----------
把一个脚本放入你的 plugin 目录就可以
了,
非常容易。
plugin 基本上分为两类:
全局的:用于所有文件
专用于某类型文件的:只用于特定类型的一类文件

全局的plugin通常在这个目录 ~/.vim/plugin
然后设置:filetype plugin on 就可以了！

与 全 局 plugin 所 在 的 目 录 一 样,通 过 查 看 这 个 plugin 是 否 提 到
了某个文件类型,就可以知道它是全局的还是专用于某种文件类型的,
在$VIMRUNTIME/macros 下的脚本是全局的,而在$VIMRUNTIME/ftplugin
目录下的则是专用于特定文件类型的。
例如:
mv thefile ~/.vim/ftplugin/stuff.vim 特定文件
mv thefile ~/.vim/macros/stuff.vim 全局
总结一下文件类型的几总形式:
	ftplugin/<filetype>.vim
	ftplugin/<filetype>_<name>.vim
	ftplugin/<filetype>/<name>.vim

:source /xxx/xxx.vim 可以在当前buffer载入vim插件

:set runtimepath+= 可以加入更多的plugin和.vimrc
------------常用选项-----------------
一些选项如果该乱了，使用 set keyword& 引号可以恢复默认值
:set nowrap 不拆行
:set list  查看制表符但是是已^i $这样显示行首行尾
set listchars=tab:>-,trail:-  这样的话就会以>----显示tab,---显示行尾
:set cmdheight=3 底部可以显示全cmd
:syntax enable 打开语法高亮

---------- 语法高亮颜色等选项----------
:set filetype=fortran 手动设置文件用什么syntax去显示,显示类型在$VIMRUNTIME/syntax下面
:set background=dark(或者light)
:syntax reset 
:syntax clear
:colorscheme evening 可以设置主题,在$VIMRUNNTIME/colors 下面

----------编辑多个文件-----------
:edit xxx 编辑其他文件（ 有时他会问你之前文件未保存，可以用:write,又或者可以:hide edit xxx,未保存的文件仍然在缓冲区）
:next 跳去下一个文件（和edit一样有时也会问你是否保存，可以用!或者:wnext，就是保存后再去下一个文件）,也可以使用:4next，一次跳4个文件
:wnext
:args 查看缓冲区有哪些文件
:previous 上一个
:wprevious
:last
:first
:set autowrite
:set noautowrite  这两个慎用
:args five.c six.c seven.h 不用重新打开vim就可以再打开多个文件，也可以:args *.txt通配符
:args xxx.txt 可以这样跳去这个文件
ctrl-^ 也可以这样按去跳文件，设置快捷键把。。。
`" 这个超有用，跳回上一个文件的修改所在处
`. 跳回最后一次修改处
mark下来的标记可以用"`标记"每个文件之间跳转,例如a.txt里面mA,在b.txt里使用"`A" 可以跳回a.txt里面的哪个位置,注意要用大写
:marks A 还可以用这个命令看看A在什么地方

:set backup  打开备份设置
:set backupext=.bak 设置备份文件样式

:write >> logfile 把当前文档内容追加到logfile
vim -R file 以只读方式打开文件
:saveas xxoo.txt 另存为新文件

--------------分隔窗口！！！！----------------
:split  水平分隔窗口, 可以:split file在新窗口里面编辑file文件,也可以用:3split指定新打开的窗口只占3行
:vsplit 垂直分隔窗口，其他和:split一样
ctrl+ww 命令可以在窗口之间跳跃
ctrl+w(hjkltb)分别对应各键方位的窗口
ctrl+w(HJKL)  可以把光标所在窗口向每一个方位调整，十分好用！！
:close  关闭窗口
:only  关闭除了当前窗口外的所有窗口
:new  水平打开新窗口
:vnew 对应也有垂直打开新窗口

:ctrl+w +(或者-)可以设置当前窗口的高度
:ctrl+_ 或者= 的话就是最小化当前窗口，或者使窗口均分
ctrl+w <或者>调整窗口宽度

:qall 从所有窗口关闭退出
:wall 保存所有窗口
:wqall 顾名思义
vim -o one.c tow.c three.c 水平打开三个窗口(-O垂直打开)
vimdiff main.c.bak main.c 用vimdiff查看两个文件之间的不同
:vertical diffsplit main.c 在vim中diff

ctrl+w 后jkhl 分辨跳去对应上下左右的窗口, 
	大写JKHL的话当前窗口霸占整个对应上下左右位置


!!!!标签页!!!!!!
:tabedit xxxfile
:tab split 新建一个当前文件的标签页
:tab help gt 可以这样去新建一个标签页打开gt的帮助文件
gt可以直接跳去下一个tab页
:tab close 关闭当前标签页，还有only啊什么的

--------!!!!!命令记录,宏命令------------
1.qa 开始命令记录，并存放在叫a的寄存器
2.blahblah 详细命令
3.q 再按一下q表示结束命令
4.@a 使用寄存器里面的命令 （@@表示重复执行上次操作，比@x方便）
！！这里的寄存器和粘贴版是同一个东西，有时命令录制错了之后，可以o一个新行，然后"np把寄存器的命令粘贴出来修改，改好后"nyy重新复制这行回去
！！要向寄存器追加内容的话，使用大写，例如"A就可以覆盖掉"a里面的内容

如果不确定寄存器保存了什么
:reg 可以查看寄存器的记录
----------替换-----------------------
:subsitute/from/to  可以直接用简写命令:s,from可以是正则表达式，例如:
:s/T/A 把当前行的第一个T换成A, :s/T/A/g可以把所有都换成A
:%s/^the/these 把所有行的the换成these
可以使用\<开始，结束\> 去限制from的精确词

关于作用范围，有以下几种方式：
:1,5s/this/that/g 表示第1到5行
:54s/President/Fool/ 第54行才替换
:.write logfile .表示把当前行写入到文件 $在范围里表示最后一行
:.,$s/fuck/FUCK 所以这个表示从当前行到最后一行都替换

替换掉windows的换行符
1、 :% s/\r//g
2、 :% s/^M//g
注意 ^M 的输入用 Ctrl+v，再按回车，或者是 Ctrl+v, Ctrl+m。

--------结合宏命令和替换的一个例子-----------
假设你有一个目录下有很多C++文件,都以".cpp"为扩展名。现欲将所
有名为"GetResp"的函数更名为"GetAnswer".
1)vim *.cpp #启 动 Vim, 同 时 指 定 了 要 编 辑 的 文 件 列 表:所 有的C++文件。现在你正在编辑的将是第一个文件。
2)qq #开始宏记录, 将后续的操作记录在名为 q 的宏中。
3):%s/\<GetResp\>/GetAnswer/g #在第一个文件中执行替换操作。
4):wnext #保存该文件并转到下一个文件进行编辑
5)q #停止宏记录
6)@q #执 行 名 为 q 的 宏。它 将 执 行 前 面 记 录 的 替 换 操 作 和":wnext".你可以看看整个过程有没有什么错误。
7)999@q #对其余文件执行同样的操作
整个宏操作中如果遇到错误会暂停下来，在替换命令最后加个e可以忽略错误

--------强大的global模式-----------
:[range]global/{pattern}/{command} 这里的command都是要:的命令，normal模式的一般命令不能使用

--------------V模式里面的一些功能------------
在v模式中,Ctrl+V后按I进入插入模式，输入的东西都会出现在块的左边！ A就是右边！
U 块内转成大写，u转成小写
~ 交换大小写
<> 可以左右移动
J 删除换行符，多行可以粘贴起来

------------读写文件的部分内容------------
:read file 可以把某些文件的内容读到当前行 
:$read file 把文件追加到当前文件的最后

----------g命令------------------
gq 格式化文本
gg=G 格式化当前整个代码
== 自动缩进当前行
guw 把这个词改成小写，gUw大写
g~ 所有大小写对换
gugu guu 整行小写
g ctrl+g 有用的字数统计
----------使用外部程序-----------
命令"!{motion}{program}"以一块文本为对象将它们通过管道送至一
个外部程序。 换句话说, 由{program}指定的外部程序, 接受由{motion}命
令指定的文本块作为输入, 以它的输出来替换{motion}指定的文本块。
例如：
!5Gsort<Enter>  这命令就是把第5行交给sort程序排序
!! 代表当前行例如，!!date 可以插入时间
:write !wc  统计当前文件字数行数

-----------冒号命令行里面的各种处理--------------
<Left> 向左一个字符
<Right> 向右一个字符
<S-Left> 或 <C-Left> 向左一个单词
<S-Right> 或 <C-Right> 向右一个单词
CTRL-B 或 <Home> 到命令行行首
CTRL-E 或 <End> 到命令行行尾
Ctrl-W 向前删除一个单词
Ctrl-u 删除光标前面所有内容
ctrl-c 撤销已经输入了的命令
命令中输入<tab>可以补全命令，输入命令时按ctrl+d可以查看可选的列表
ctrl-l 可以最大限度补全命令

:history 查看所有历史记录命令,可以:history / 去查看搜索过的命令
q: ctrl-f  作用相同

:q 可以打开命令行窗口，在这个窗口下面可以使用normal和insert两种模式的各种功能，回车就可以再执行这条命令

-----------执行shell-------------------
:! 后面跟shell命令可以直接执行shell
:r !{program} #执行 {program} 并读取它的输出
:w !{program} #执行 {program} 并把当前缓冲区的内容作为它的输入
:[range]!{program} #以 {program} 过滤指定的行
:shell 这样可以开一个新的shell在下方

-----------打开旧的文件--------------
`0 每次打开上次编辑过的文件，输入这个可以返回上次退出时的地方
:oldfiles 可以查看之前打开文件的历史，然后输入:e #<2 就是打开第二个文件,但是这个方法不方便
:browse oldfiles 按q退出，然后输入号码可以直接编辑

---------- 会话(例如保存上次退出时的窗台，窗口标签等)，sessionoptions-----------
:mksession vimbook.vim  创建一个状态
:source vimbook.vim  恢复状态
vim -S vimbook.vim xxxfile 也可以在启动vim的时候指定好脚本

会话会保存一个窗口的外观

----------视图(保存一个窗口的属性)---------------------
:mkview x x可选1-10,也可以指定文件名的视图
:loadview x 读取视图

----------查找文件！！！-------------------
:e . 查看当前文件夹
在浏览文件时按:
del 删除, 或者用D
mb 做一个书签
gb 跳到数千
o 水平窗口打开这个文件
v 垂直打开这个文件
t 在一个新的标签页里面打开
q 打开bookmark和history
r 反转排序
a 查看隐藏文件
i 控制列表的显示风格，文件名，详细信息
s 改变文件排序信息
R 重命名
---
想在当前目录想查找一个文件时候,例如 include "io.h":
gf 把光标移动到这个单词，输入后就会跳到编辑这个文件,强大的用处！！例如从类名跳到文件！
gd 在变量名上面输入之后就会跳到定义这个变量名的地方
:lcd  查看当前目录
:set path+=xx目录 把xx目录加入到path，然后搜索就可以搜到

--------缓冲区!!!---------------
:buffers 显示缓冲区，或者用:ls更方便简单
:buffer 2 表示打开第二个文件,可以用:b 更简便
:sbuffer 2 在一个水平窗口打开一个buffer
:vbuffer 2 垂直窗口
:bdelete 2 删除buffer

-------快速键入---------------
i模式下:
ctrl-w 删除整个word
ctrl-u 删除整行

:set textwidth=30 断行长度
:set shiftwidth=4 设置缩进长度
:set softtabstop=4 设置tab键的缩进量
:retab 8 重新把文档已有的tab设置长度

-------左右滚动---------
zh 向右滚动 zH滚动半屏
ze 最右边
zl zL 左边
zs 最左边

---搜索设置-------
:set ignorecase 忽略搜索大小写

------源代码编辑相关，ctags------
ctags ./*.c 把当前目录的所有源文件都加载成一个ctags记录的定义信息
ctags -R --exclude=.git --exclude=log * ~/.rvm/gems/ruby-1.9.3-p194/gems
ctags -R 当前目录树都生成 #rails 里面使用这个
:tag funcName 搜索当前函数在哪里定义，即使是另外一个文件也可以跳过去
ctrl-] 用这个命令可以在当前单词直接跳转，方便
:tags 可以查到你用过哪些tags
ctrl-T 往回跳
:stag tagname 可以分窗口去打开tag
:tnext 当遇到同名时候可以这样跳
:tselect 用这个可以一次查看所有的同名tag,后面支持正则 如/^block$
:ptag 去打开可以打开一个temp窗口不会影响到当前代码窗口 :pclose会关闭
:pedit 

------代码块中移动-------
% 可以在括号之中跳动
[[ 跳到代码快开头 
][ 跳到代码快末尾 
[] 下一个函数的头
]] 函数尾部

[]符号还可以和( /等特殊符号配合跳转
[m或者]m 可以在函数之间跳动

-----定义新命令---------
:command 可以列出自己定义过的命令
自定义的命令一定要以大写开头
:command 命令名称 实际操作
:command -nargs=0 DeleteFirst 1delete -nargs可以指定后面跟的参数个数0 1 *任意个,?,+

------自动命令---------
:autocmd FileWritePre * call SomeFunc 
#SomeFunc是自己先前定义好的function,这个意思是每次文件保存支持先执行一个这个funcName

:autocmd [group] {events} {file_pattern} [nested] {command} #autocmd的一般形式
normal 代表在autocmd进入normal模式

-------语言编码!!!---------
:language 可以查看当前系统语言和文档编码,/usr/share/locale里面可以查看系统支持哪些编码
shell command:env LANG=de_DE.ISO_8859-1 vim 
这样可以为vim设置一下运行环境
:language fr_FR.ISO_8859-1 也可以直接在vim内这样设置
:set encoding=utf-8
:set fileencoding?
当字符编码出错的时候，可以移到编码上面输入ga ，这样就可以查看编码底细

set fencs=utf-8,gbk #这一行的作用是告诉 vim，打开一个文件时，尝试 utf8,gbk
一般设下面这种，待定
set fileencoding=gb18030 
set fileencodings=utf-8,gb18030,utf-16,big5

vim里面的编码主要跟三个参数有关：enc(encoding), fenc(fileencoding)和fencs(fileencodings) 
a)fenc是当前文件的编码,改变 fenc后再w来将此文件存成不同的编码。
比如说，我:set fenc=utf-8然后:w就把文件存成utf-8的了，:set fenc=gb18030再:w就把文件存成gb18030的了。这个值对于打开文件的时候是否能够正确地解码没有任何关系。 

b)fencs就是用来在打开文件的时候进行解码的猜测列表。文件编码没有百分百正确的判断方法，所以vim只能猜测文件编码。
比如我的vimrc里面这个的设置是 set fileencodings=utf-8,gb18030,utf-16,big5

c)enc，其作用基本只是显示。不管最后的文件是什么编码的，vim都会将其转换为当前系统编码来进行处理，这样才能在当前系统里面正确地显示出 来，因此enc就是干这个的。

-----------------------------
vim脚本!!!!!

:let i = 1
:while i < 5
: echo "count is" i
: let i += 1
:endwhile
#冒号可用可不用，不过有冒号可以和一般命令区别开来

:for i in range(1, 4)
: echo "count is" i
:endfor
#也可以这样写
let s:i = 50 #前面用s:去声明i，表明i是当前脚本的变量，不会污染其他脚本
b:name 局部于一个缓冲区的变量
w:name 局部于一个窗口的变量
g:name 全局变量(同样适用于函数中)
v:name Vim 的预定义变量
a:name 方法里面的参数变量

unlet s:count #删除变量,unlet! 可以强制删除
变量不清除的话在下次打开脚本也会继续存在，可以使用
if exists("s:count")去测试，记得exists里面是用字符串

表达式还可以使用以下的声明，可以echo看一下
$NAME 环境变量名
&name Vim 中的选项名
@r Vim 中的寄存器名

###if statement
:if {condition}
    {statements}
:elseif {condition}
    {statements}
:endif

sleep 50m #表示睡50毫秒，50的话就直接是50秒

#execute#
execute 可以执行一个冒号命令,例如 excute "tag fuck",等于执行 :tag fuck
如果要执行gg=G这种normal模式的命令，使用:normal
execute "normal gg=G" 
execute "normal Inew\<Enter> \<Esc>" #这样可以插入一个new，然后换行回no模式，用\可以避免真的插入一个esc符号

#function(help functions 可以列出所有的function)#
call xx() #表示执行xx函数，可以11,13call xx() 表示在11行到13行使用这个函数
expand("%") #可以获取当前文件名字符串!!! bufname("%") 也行
调用某个函数可以用  call somefunction(args)

#函数的定义#
:function {name}({var1}, {var2}, ...)
: {body}
:endfunction
用户自定义函数的名称必须大写开头

#写一个统计某行到某行的函数#
:function Count_words() range
: let lnum = a:firstline
: let n = 0
: while lnum <= a:lastline
: let n = n + len(split(getline(lnum)))
: let lnum = lnum + 1
: endwhile
: echo "found " . n . " words"
:endfunction

11,13call Count_words() #表示11到13行执行这个函数，a:firstline表示第一行行号

#函数可变参数#
:function Show(start, ...) # 变 量"a:1"代 表 第 一 个 可 选 参 数,"a:2"指 第 二 个,依 此 类 推。变量"a:0"包含了实际传递的参数的个数。

#数组和hash#
a = ['fuck','you']
call add(a,'mother')
a+a #可以连个数组串接
b = {'one':'one', 'two':'two'}
b['one'] # or b.one
for i in b # for key in b

#hash面向对象的使用，把function定义到hash里面#
:function uk2nl.translate(line) dict
: return join(map(split(a:line), 'get(self, v:val, "???")'))
:endfunction
self 就是就指dict的自引用

#异常#
try
    xx
catch
    xx
endtry

#自定义命令行#
command -nargs=1 Correct :call s:Add(<q-args>, 0) #定义了一个叫Correct的命令,call当前脚本的Add方法

#在映射里调用当前脚本的方法<SID>#
map <F7> :call <SID>Add(args)<CR> 调用当前脚本的Add方法


-----------------------------
一些插件
vundle:
    (1)git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
    (2)加入.vimrc
set nocompatible    " be iMproved
filetype off    " required!  
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" vim-scripts repos
Bundle 'vim-plugin-foo'
Bundle 'vim-plugin-bar'

filetype plugin indent on    " required!
    (3):BundleInstall 安装插件,:BundleInstall! 升级, BundleClean 清除列表中的插件
http://vim-scripts.org/vim/scripts.html 在这里可以找到插件名称

----------------------------------------
ctrlp 用法
Press <c-p> or run :CtrlP to invoke CtrlP in find file mode.
Or run :CtrlPBuffer or :CtrlPMRU to invoke CtrlP in buffer or MRU mode.
Once CtrlP is open:
Press <c-f> and <c-b> to switch between find file, buffer, and MRU file modes.
Press <c-d> to switch to filename only search instead of full path.
Press <F5> to purge the cache for the current directory and get new files.
Use * or | in the prompt to submit the string as a Vim’s regexp pattern.
Or press <c-r> to switch to regexp mode.
End the input string with a colon : followed by a command to execute after opening the file.
e.g. abc:45 will open the file matched the pattern and jump to line 45.
Submit two dots .. as the input string to go backward the directory tree by 1 level.
Use <c-y> to create a new file and its parent dirs.
Use <c-z> to mark/unmark files and <c-o> to open them.

https://github.com/kien/ctrlp.vim

-----------------------------------------
FencView 用来方便自动显示好各种韩文繁体简体编码
安装好后使用FencAutoDetect就可以自动显示正确编码

----------------------------------------
自带的代码补完
ctrl+x ctrl+o ，这样输入完就会有代码补完提示

--------------------------------------
代码折叠
zf
zf3j #向下折叠3行
zo #打开折叠 open
zc #关闭折叠 close
zd #删除折叠
v模式选择后 zf也可以折叠
zk zj 折叠之间上下跳转
zr #打开当前行层叠的折叠
zR #打开所有折叠
zm #关上当前层级折叠
zM #关上所有折叠
:mkview #可以把折叠保存， 打开文件时loadview就行
:set foldmethod=indent #已缩进做折叠

----------------------
ctrl+z :suspend

ctrl-z 退出vim 后 输入fg可以返回

---------------------
vim-css-color 本来不支持sass和scss文件，只要这样做就支持

create a new file: vim-css-color/after/syntax/sass.vim. In that file put this line:
syn cluster sassCssAttributes add=@cssColors
-----------------
修改leader !!
<leader> 默认是 \
可以inornmap <leader>a do sth
:let mapleader= ","

