 Redis
安装：
sudo apt-get install tcl8.5-dev
不设置默认安装 在/usr/local/bin 下
make PREFIX=/some/other/directory install
安装包下的redis.conf是配置文件，复制到/etc/redis/redis.conf
一些配置：
binding 127.0.0.1 相当与绑定了本地，外部链接不能
requirepass 密码
maxmemory 可用最大内存
vm-xxx 虚拟内存，默认no
启动：(1)先启动redis-server ==> redis-server /etc/redis/redis.conf
 (2)启动redis-cli -a password

使用:

（1）简单设入值
set key value;
get key; 返回value
如:set foo bar; get foo;//返回"bar"

（2）基本数据类型是string,但是有使用数字有简单的函数可以做加减，
如：set counter 10;
incr counter 102;
incrby counter 10;
get counter;//112

(3)List (Redis用链表的方式实现list，增快读慢)
rpush list名称 值 //在链表（右边）尾部加入值
lpush //左边
lrange list名称 第几个 到第几个//取出链表中的值 -1可以代表最后一个元素 -2代表倒数第二个，遍历时使用 0 -1即可
llen list名称//查看链表长度
lindex list名称 下标 //取出下标 

（4）set （无序不重复）
sadd set名称 值 //在set 中加入值
smembers set名称 //遍历set
sismember set名称 值 //判断值是否已在set中存在，存在返回1，不存在返回0
sinter set1 set2//判断交集

$$添加set时为set排序，
zadd set名称  顺序 值//设入
zrange set名称 0 -1//取出时会按照 上面的顺序排序

(5) hash
HEXISTS key field// Determine if a hash field exists
HGET key field //Get the value of a hash field
HGETALL key //Get all the fields and values in a hash
HINCRBY key field increment //Increment the integer value of a hash field by the given number
HINCRBYFLOAT key field increment //Increment the float value of a hash field by the given amount
HKEYS key //Get all the fields in a hash
HLEN key //Get the number of fields in a hash
HMGET key field [field ...] //Get the values of all the given hash fields
HMSET key field value [field value ...] //Set multiple hash fields to multiple values
HSET key field value //Set the string value of a hash field
HSETNX key field value //Set the value of a hash field, only if the field does not exist
HVALS key //Get all the values in a hash
中间有M的代表multiple 可以设置多个
hmset hash名称 键1 值1 键2 值2

----------------------------------------------------------------
Rediska

(1)初始化，固定用
$options = array(
	 'servers' =>array('host'=> '127.0.0.1',
	 	          'port'=> 6379,
			  'password' => 'god',
        		  ),
    'namespace' => 'English_' //namespace用于区分多个应用，你的key前加的字符串
);
$rediska = new Rediska($options);

(2)String
$key = new Rediska_Key('keyName');//设置key名称

$key->setValue('value');//设置

print count($key); #=> 5 //获取值长度

$key->expire(5 * 60);//设置存活时间，5分钟

$key->setValue(array('value', 'value2', 'value3'));//可把数组设入

$value = $key->getValue();//取值

$key->delete();//删除键值

（3）Lists
（rediska的Lists对象可以像php的索引数组搬操作，只要创建一个lists对象就行，注意设关联key值的话不会设如redis）
// Initialize list
$list = new Rediska_Key_List('list');

// Add two elements to list
$list[] = 'first element';
$list[] = 'second element';

// Get element with index 1
echo $list[1]; #=> 'second element';

// Set element with index 0
$list[0] = 'new first element';

// Get elements count
echo count($list); #=> 2

// Iterate list
foreach($list as $element) {
    echo $element;
}

（4）set
(set的用法和lists差不多，但没有索引)
// Initialize set
$set = new Rediska_Key_Set('set');

// Add two elements to set
$set[] = 'first element';
$set[] = 'second element';

// Get elements count
echo count($set); #=> 2

// check if element is in set
$isInSet = $set->exists('first element');

（5）sorted sets
用这个不如直接用lists

（6）hashes
（可以像php的关联数组搬使用，值是int类型可以使用increatment函数，也可以用set函数直接设入一个php数组，代码说话）
// Initialize hash
$user = new Rediska_Key_Hash('user');

// Set field as object properties
$user->firstName = 'John';

// Fields accessible as array keys
$user['lastName'] = 'Silver';

// Get field value
print $user->firstName; #=> 'Silver'

// Remove field
unset($user->firstName);

// Check if field is set
if (!isset($user->firstName)) {
    // Set several fields at a time
    $user->set(array('firstName' => 'John', 'lastName' => 'Silver', 'viewed' => 1));
}

// Get fields count
print count($user); #=> 2

// Increment field's value
$user->increment('viewed');

// Iterate hash
foreach($user as $field => $value) {
    print "$field => $value";
}

（7）transaction
$rediska = new Rediska();
用法1：
$rediska->transaction()->set('a', 1)
                       ->get('a', 1)
                       ->delete('a')
                       ->execute();

用法2：
$transaction = $rediska->transaction();

$transaction->set('a', 1);

print $rediska->exists('a'); // #=> false

$transaction->execute();

回滚：
 $transaction->discard();

------------网上的-----
1、手动抓取快照，save或者bgsave（后台异步）
redis> save
OK
redis> bgsave
Background saving started

注意redis只有一个线程，每次bgsave都会令把所有内存数据写到硬盘，不是增量式写入,所以数据量大时会另server hang住，不推荐使用

2、获取某个key的类型
redis> type mylist
list

3、匹配所有符合模式的key，*代表所有
redis> keys *
1) "name"
2) "mylist"

keys 还可以用patten
keys article* #=> "article:1:visit"  "article:6:visit"


4、随机返回一个key，
redis> randomkey
"mylist"

5、重命名一个key，
redis> rename name myname
OK
redis> keys *
1) "myname"
2) "mylist"

6、list的一些操作，
将一个值添加到列表的首部，
redis> rpush company taobao
(integer) 1
redis> lrange company 0 1
1)    "taobao"

将一个值添加到列表的尾部，
redis> lpush company sina
(integer) 2
redis> lrange company 0 1
1) "sina"
2) "taobao"

获得列表长度，
redis> llen company
(integer) 2

返回list中某个范围的值，模式LRANGE key start end
redis> lrange company 1 2
1) "taobao"
2) "sohu"

只保留list中某个范围的值，模式LTRIM key start end
redis> lrange company 0 2
1) "sina"
2) "taobao"
3) "sohu"
redis> ltrim company 0 1
OK
redis> lrange company 0 2
1) "sina"
2) "taobao"

获得list中某个索引号的值，模式LINDEX key index
redis> lrange company 0 4
1) "baidu"
2) "sohu"
3) "sina"
4) "taobao"
redis> lindex company 2
"sina"
redis> lindex company 0
"baidu"

设置list中某个索引位置的值，模式LSET key index value
redis> lrange company 0 4
1) "baidu"
2) "sohu"
3) "sina"
4) "taobao"
redis> lset company 2 google
OK
redis> lrange company 0 4
1) "baidu"
2) "sohu"
3) "google"
4) "taobao"

用lpop获取list中索引最小的值（头部值），rpop获取list中索引最大的值（尾部值），注意获取之后list中就不再有这个值了。
redis> lrange company 0 4
1) "baidu"
2) "sohu"
3) "google"
4) "taobao"
redis> lpop company
"baidu"
redis> rpop company
"taobao"
redis> lrange company 0 4
1) "sohu"
2) "google"

特别注意：以上这些命令中的start或者index都是从0开始计算的

7、集合的一些操作
向集合中增加一个元素，模式SADD key member
redis> sadd class kongxing
(integer) 1
redis> type class
set

列出集合中的所有元素，注意元素是无序的，模式SMEMBERS key
redis> smembers class
1) "banqiao"
2) "rulong"
3) "changjie"
4) "kongxing"

从集合中删除一个元素，模式SREM key member
redis> srem class kongxing
(integer) 1
redis> smembers class
1) "banqiao"
2) "rulong"
3) "changjie"

返回集合大小，模式SCARD key
redis> scard class
(integer) 3

判断某个值是否在集合中，模式SISMEMBER key member
redis> sismember class kongxing
(integer) 0—表示没有’kongxing’这个元素
redis> sismember class rulong
(integer) 1—表示存在’rulong’这个元素

获取多个集合的交集元素，模式SINTER key1 key2 ... keyN
redis> smembers dba
1) "rulong"
2) "changjie"
redis> smembers class
1) "banqiao"
2) "rulong"
3) "kongxing"
4) "changjie"
redis> sinter class dba
1) "rulong"
2) "changjie"
redis> sinter dba class
1) "rulong"
2) "changjie"
---注意：取交集，所以与各个key的位置无关  


flushall删除所有
